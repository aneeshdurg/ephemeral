import Peer from "peerjs";
import * as Msg from "./messages";
import { UIElements } from "./ui";
import { IdDBInterface, Identity } from "./identity";
import { Post, PostDBInterface } from "./post";
import { Storages } from "./storage";
import { Settings } from "./settings/settings";
interface Connection {
    conn: any;
    open: boolean;
    time: number;
}
export declare type ConnectionMap = Map<string, Connection>;
export declare class Client {
    identity: Identity;
    unknownIds: Set<string>;
    _knownIds: IdDBInterface | null;
    get knownIds(): IdDBInterface;
    connectionsMap: ConnectionMap;
    potentialPeers: Set<string>;
    _postCache: PostDBInterface | null;
    get postCache(): PostDBInterface;
    _unverifiedPostCache: PostDBInterface | null;
    get unverifiedPostCache(): PostDBInterface;
    _peer: Peer | null;
    get peer(): Peer;
    pubKey: CryptoKey | null;
    pubKeyJWK: JsonWebKey | null;
    privKey: CryptoKey | null;
    ui: UIElements;
    settings: Settings;
    setupWaiter: Promise<void>;
    _setupResolver: (() => void) | null;
    timers: Array<ReturnType<typeof setInterval>>;
    constructor(ui: UIElements, settings: Settings, storages: Storages);
    setInterval(f: () => void, interval: number): void;
    destroy(): void;
    postCB(contents: string, parent: string | null): Promise<Post>;
    editCB(newContents: string, post: Post): Promise<void>;
    addPost(post: Post, trusted: boolean, update: boolean | null): Promise<void>;
    broadcast(msg: Msg.Message, exclude_?: Set<string>): void;
    recvPost(raw: any): Promise<void>;
    recvPostQuery(conn: any): Promise<void>;
    recvRequestPost(conn: any, data: any): Promise<void>;
    recvPostQueryResp(conn: any, raw: any): Promise<void>;
    recvQueryIdent(conn: any, query: any): Promise<void>;
    recvQueryIdentResp(resp: any): Promise<void>;
    recv(conn: any, data: any): Promise<void>;
    accept(conn: any): void;
    refreshConnections(): Promise<void>;
    renderCache(): Promise<void>;
    setupIdentity(storages: Storages, id: string): Promise<void>;
    onopen(storages: Storages, id: string): Promise<void>;
}
export {};
